{"ast":null,"code":"var _jsxFileName = \"/Users/elainekim/Desktop/challenge1/src/components/historicalChart.jsx\";\nimport React, { Component } from \"react\";\nimport Chart from \"./chart\";\nconst API = \"https://npdpl9r340.execute-api.us-east-1.amazonaws.com/prod/marketdata/v1/index/HDAI/history?from=2019-01-01&to=2050-01-01&groupBy=1d\";\n\nclass HistoricalChart extends Component {\n  constructor() {\n    super();\n    this.state = {\n      chartData: {},\n      isLoading: false\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      setInterval(async () => {\n        this.setState({\n          isLoading: true\n        });\n        fetch(API).then(response => response.json()).then(data => {\n          const allData = data;\n          let values = [];\n          let times = [];\n          allData.forEach(element => {\n            values.push(element.currentValue);\n            times.push(element.time);\n          });\n          this.setState({\n            chartData: {\n              labels: times,\n              datasets: [{\n                label: \"Value During Specified Time\",\n                data: values,\n                backgroundColor: [\"rgba(54, 162, 235, 0.6)\"]\n              }]\n            },\n            isLoading: false //WTF?????? only works when its false..\n\n          });\n        });\n      }, 30000);\n    } catch (e) {\n      console.log(e);\n    } // fetch(API)\n    //   .then(response => response.json())\n    //   .then(data => {\n    //     const allData = data;\n    //     let values = [];\n    //     let times = [];\n    //     allData.forEach(element => {\n    //       values.push(element.currentValue);\n    //       times.push(element.time);\n    //     });\n    //     this.setState({\n    //       chartData: {\n    //         labels: times,\n    //         datasets: [\n    //           {\n    //             label: \"Value During Specified Time\",\n    //             data: values,\n    //             backgroundColor: [\"rgba(54, 162, 235, 0.6)\"]\n    //           }\n    //         ]\n    //       },\n    //       isLoading: false //WTF?????? only works when its false..\n    //     });\n    //   });\n\n  }\n\n  render() {\n    const _this$state = this.state,\n          chartData = _this$state.chartData,\n          isLoading = _this$state.isLoading;\n\n    if (isLoading) {\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \"Loading... \");\n    } else {\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(Chart, {\n        chartData: chartData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      })));\n    }\n  }\n\n}\n\nexport default HistoricalChart;","map":{"version":3,"sources":["/Users/elainekim/Desktop/challenge1/src/components/historicalChart.jsx"],"names":["React","Component","Chart","API","HistoricalChart","constructor","state","chartData","isLoading","componentDidMount","setInterval","setState","fetch","then","response","json","data","allData","values","times","forEach","element","push","currentValue","time","labels","datasets","label","backgroundColor","e","console","log","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,MAAMC,GAAG,GACP,uIADF;;AAGA,MAAMC,eAAN,SAA8BH,SAA9B,CAAwC;AACtCI,EAAAA,WAAW,GAAG;AACZ;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE,EADA;AAEXC,MAAAA,SAAS,EAAE;AAFA,KAAb;AAID;;AAED,QAAMC,iBAAN,GAA0B;AACxB,QAAI;AACFC,MAAAA,WAAW,CAAC,YAAY;AACtB,aAAKC,QAAL,CAAc;AAAEH,UAAAA,SAAS,EAAE;AAAb,SAAd;AACAI,QAAAA,KAAK,CAACT,GAAD,CAAL,CACGU,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAEQG,IAAI,IAAI;AACZ,gBAAMC,OAAO,GAAGD,IAAhB;AACA,cAAIE,MAAM,GAAG,EAAb;AACA,cAAIC,KAAK,GAAG,EAAZ;AACAF,UAAAA,OAAO,CAACG,OAAR,CAAgBC,OAAO,IAAI;AACzBH,YAAAA,MAAM,CAACI,IAAP,CAAYD,OAAO,CAACE,YAApB;AACAJ,YAAAA,KAAK,CAACG,IAAN,CAAWD,OAAO,CAACG,IAAnB;AACD,WAHD;AAIA,eAAKb,QAAL,CAAc;AACZJ,YAAAA,SAAS,EAAE;AACTkB,cAAAA,MAAM,EAAEN,KADC;AAETO,cAAAA,QAAQ,EAAE,CACR;AACEC,gBAAAA,KAAK,EAAE,6BADT;AAEEX,gBAAAA,IAAI,EAAEE,MAFR;AAGEU,gBAAAA,eAAe,EAAE,CAAC,yBAAD;AAHnB,eADQ;AAFD,aADC;AAWZpB,YAAAA,SAAS,EAAE,KAXC,CAWK;;AAXL,WAAd;AAaD,SAvBH;AAwBD,OA1BU,EA0BR,KA1BQ,CAAX;AA2BD,KA5BD,CA4BE,OAAOqB,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD,KA/BuB,CAiCxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACD;;AAEDG,EAAAA,MAAM,GAAG;AAAA,wBAC0B,KAAK1B,KAD/B;AAAA,UACCC,SADD,eACCA,SADD;AAAA,UACYC,SADZ,eACYA,SADZ;;AAGP,QAAIA,SAAJ,EAAe;AACb,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAP;AACD,KAFD,MAEO;AACL,aACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AAAO,QAAA,SAAS,EAAED,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,CADF;AAOD;AACF;;AAnFqC;;AAsFxC,eAAeH,eAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Chart from \"./chart\";\n\nconst API =\n  \"https://npdpl9r340.execute-api.us-east-1.amazonaws.com/prod/marketdata/v1/index/HDAI/history?from=2019-01-01&to=2050-01-01&groupBy=1d\";\n\nclass HistoricalChart extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      chartData: {},\n      isLoading: false\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      setInterval(async () => {\n        this.setState({ isLoading: true });\n        fetch(API)\n          .then(response => response.json())\n          .then(data => {\n            const allData = data;\n            let values = [];\n            let times = [];\n            allData.forEach(element => {\n              values.push(element.currentValue);\n              times.push(element.time);\n            });\n            this.setState({\n              chartData: {\n                labels: times,\n                datasets: [\n                  {\n                    label: \"Value During Specified Time\",\n                    data: values,\n                    backgroundColor: [\"rgba(54, 162, 235, 0.6)\"]\n                  }\n                ]\n              },\n              isLoading: false //WTF?????? only works when its false..\n            });\n          });\n      }, 30000);\n    } catch (e) {\n      console.log(e);\n    }\n\n    // fetch(API)\n    //   .then(response => response.json())\n    //   .then(data => {\n    //     const allData = data;\n    //     let values = [];\n    //     let times = [];\n    //     allData.forEach(element => {\n    //       values.push(element.currentValue);\n    //       times.push(element.time);\n    //     });\n    //     this.setState({\n    //       chartData: {\n    //         labels: times,\n    //         datasets: [\n    //           {\n    //             label: \"Value During Specified Time\",\n    //             data: values,\n    //             backgroundColor: [\"rgba(54, 162, 235, 0.6)\"]\n    //           }\n    //         ]\n    //       },\n    //       isLoading: false //WTF?????? only works when its false..\n    //     });\n    //   });\n  }\n\n  render() {\n    const { chartData, isLoading } = this.state;\n\n    if (isLoading) {\n      return <p>Loading... </p>;\n    } else {\n      return (\n        <React.Fragment>\n          <div className=\"container\">\n            <Chart chartData={chartData} />\n          </div>\n        </React.Fragment>\n      );\n    }\n  }\n}\n\nexport default HistoricalChart;\n"]},"metadata":{},"sourceType":"module"}